@page "/sims/edit"
@using Microsoft.EntityFrameworkCore
@using pokedata.Model
@inject IDbContextFactory<pokedata.Data.pokedataContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Sim</h2>
<hr />
@if (Sim is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Sim" OnValidSubmit="UpdateSim" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Sim.Id" value="@Sim.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Sim.Title" class="form-control" />
                    <ValidationMessage For="() => Sim.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Sim.FirstName" class="form-control" />
                    <ValidationMessage For="() => Sim.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Sim.LastName" class="form-control" />
                    <ValidationMessage For="() => Sim.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sex" class="form-label">Sex:</label>
                    <InputText id="sex" @bind-Value="Sim.Sex" class="form-control" />
                    <ValidationMessage For="() => Sim.Sex" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">DateOfBirth:</label>
                    <InputDate id="dateofbirth" @bind-Value="Sim.DateOfBirth" class="form-control" />
                    <ValidationMessage For="() => Sim.DateOfBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="addressline1" class="form-label">AddressLine1:</label>
                    <InputText id="addressline1" @bind-Value="Sim.AddressLine1" class="form-control" />
                    <ValidationMessage For="() => Sim.AddressLine1" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="addressline2" class="form-label">AddressLine2:</label>
                    <InputText id="addressline2" @bind-Value="Sim.AddressLine2" class="form-control" />
                    <ValidationMessage For="() => Sim.AddressLine2" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="postalcode" class="form-label">PostalCode:</label>
                    <InputText id="postalcode" @bind-Value="Sim.PostalCode" class="form-control" />
                    <ValidationMessage For="() => Sim.PostalCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="healthcondition" class="form-label">HealthCondition:</label>
                    <InputText id="healthcondition" @bind-Value="Sim.HealthCondition" class="form-control" />
                    <ValidationMessage For="() => Sim.HealthCondition" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/sims">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Sim? Sim { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Sim ??= await context.Sim.FirstOrDefaultAsync(m => m.Id == Id);

        if (Sim is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSim()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Sim!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SimExists(Sim!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/sims");
    }

    private bool SimExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Sim.Any(e => e.Id == id);
    }
}
