@page "/sims/delete"
@using Microsoft.EntityFrameworkCore
@using pokedata.Model
@inject IDbContextFactory<pokedata.Data.pokedataContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Sim</h2>
    <hr />
    @if (sim is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@sim.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@sim.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@sim.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Sex</dt>
            <dd class="col-sm-10">@sim.Sex</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOfBirth</dt>
            <dd class="col-sm-10">@sim.DateOfBirth</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AddressLine1</dt>
            <dd class="col-sm-10">@sim.AddressLine1</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AddressLine2</dt>
            <dd class="col-sm-10">@sim.AddressLine2</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PostalCode</dt>
            <dd class="col-sm-10">@sim.PostalCode</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HealthCondition</dt>
            <dd class="col-sm-10">@sim.HealthCondition</dd>
        </dl>
        <EditForm method="post" Model="sim" OnValidSubmit="DeleteSim" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(sim is null)">Delete</button> |
            <a href="/sims">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Sim? sim;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        sim = await context.Sim.FirstOrDefaultAsync(m => m.Id == Id);

        if (sim is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSim()
    {
        using var context = DbFactory.CreateDbContext();
        context.Sim.Remove(sim!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/sims");
    }
}
